openapi: '3.0.0'
info:
  title: 'HTTP Faker API'
  version: '1.0.0'
  description: 'A simple HTTP echo server API'
tags:
  - name: Echo
    description: Endpoints that echo back request information
  - name: Auth
    description: Authentication endpoints
  - name: Random Data
    description: Endpoints that generate random data
  - name: Dynamic data
    description: Endpoints that generate dynamic data
paths:
  /api/echo:
    post:
      summary: Echo back request details
      description: Returns the complete request details including URL, method, headers, and body
      tags:
        - Echo
      responses:
        200:
          description: Request details
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: Complete request URL
                  method:
                    type: string
                    description: HTTP method used
                  headers:
                    type: object
                    description: Request headers
                  body:
                    type: string
                    description: Raw request body
  /api/echo/raw:
    post:
      summary: Echo back request body
      description: Returns the raw request body with the original content-type
      tags:
        - Echo
      responses:
        200:
          description: Raw request body
          content:
            '*/*':
              schema:
                type: string
  /api/echo/custom:
    post:
      summary: Echo back request with custom headers and content
      description: Returns the raw request body with the original content-type
      tags:
        - Echo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                headers:
                  type: object
                  description: Custom headers to return
                content:
                  type: string
                  description: Content to return as-is
                contentBase64:
                  type: string
                  description: Base64 content to decode and return
                contentJSON:
                  type: object
                  description: JSON content to stringify and return
                type:
                  type: string
                  description: Content-Type header to set
      responses:
        200:
          description: Custom response
          content:
            '*/*':
              schema:
                type: string
  /api/auth/oauth2/client-credentials/token:
    post:
      summary: Get OAuth2 access token
      description: Obtain an access token using client credentials grant type
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - grant_type
                - client_id
                - client_secret
                - scope
              properties:
                grant_type:
                  type: string
                  description: Must be 'client_credentials'
                  example: client_credentials
                client_id:
                  type: string
                  description: Client ID
                  example: demo-client-id
                client_secret:
                  type: string
                  description: Client secret
                  example: demo-client-secret
                scope:
                  type: string
                  description: Requested scope
                  example: user:read
      responses:
        200:
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Authenticated successfully
                  access_token:
                    type: string
                    example: a1b2c3d4e5f6g7h8i9j0
                  scope:
                    type: string
                    example: user:read
        401:
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid client details or scope
  /api/auth/oauth2/client-credentials/resource:
    get:
      summary: Access protected resource
      description: Access a protected resource using an OAuth2 access token
      tags:
        - Auth
      parameters:
        - in: query
          name: access_token
          schema:
            type: string
          required: true
          description: OAuth2 access token
      responses:
        200:
          description: Resource access successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  resource:
                    type: object
                    properties:
                      name:
                        type: string
                        example: bruno
                      email:
                        type: string
                        example: hello@bruno.com
        401:
          description: Invalid access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/auth/bearer/login:
    post:
      summary: Bearer Authentication Login
      description: Authenticate with username and password to receive a bearer token
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: User's username
                  example: admin
                password:
                  type: string
                  description: User's password
                  example: password
      responses:
        200:
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: my_secret_token
        401:
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
  /api/auth/bearer/resource:
    get:
      summary: Access Protected Resource
      description: Access a protected resource using a bearer token
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        200:
          description: Resource access successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: bruno
                  age:
                    type: integer
                    example: 5
                  email:
                    type: string
                    example: support@usebruno.com
                  likes:
                    type: array
                    items:
                      type: string
                    example: ['kibbles', 'naps', 'string cheese']
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
  /api/auth/digest/{qop}/{user}/{passwd}:
    get:
      summary: Digest Authentication with Dynamic Parameters
      description: Prompts the user for authorization using Digest Auth with configurable QOP, user, and password
      tags:
        - Auth
      parameters:
        - in: path
          name: qop
          required: true
          schema:
            type: string
            enum: [auth, auth-int, none]
          description: Quality of Protection (auth, auth-int, or none)
          example: auth
        - in: path
          name: user
          required: true
          schema:
            type: string
          description: Username (will be auto-created if doesn't exist)
          example: admin
        - in: path
          name: passwd
          required: true
          schema:
            type: string
          description: Password for the user
          example: password
      responses:
        200:
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access granted
                  authenticated:
                    type: boolean
                    example: true
                  user:
                    type: string
                    example: admin
                  qop:
                    type: string
                    example: auth
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: httpfaker
                      version:
                        type: string
                        example: 0.2.0
                      features:
                        type: array
                        items:
                          type: string
                        example: ['digest-auth', 'bearer-auth', 'oauth2']
                      timestamp:
                        type: string
                        format: date-time
                      currentUsers:
                        type: array
                        items:
                          type: string
                        example: ['admin', 'user', 'test']
        401:
          description: Authentication required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Authentication required
                  sessionId:
                    type: string
                    example: 127.0.0.1
                  qop:
                    type: string
                    example: auth
                  users:
                    type: array
                    items:
                      type: string
                    example: ['admin', 'user', 'test']
          headers:
            WWW-Authenticate:
              description: Digest authentication challenge
              schema:
                type: string
                example: 'Digest realm="httpfaker.org", qop="auth", nonce="base64nonce", opaque="httpfaker-opaque-value"'
            X-Session-ID:
              description: Session identifier
              schema:
                type: string
                example: 127.0.0.1
  /api/random/json:
    get:
      summary: Generate random user data
      description: Generates random user data of specified size using Faker.js
      tags:
        - Random Data
      parameters:
        - in: query
          name: size
          schema:
            type: string
          required: false
          description: Desired size of response (e.g. '1mb', '500kb'). Defaults to '1mb'
          example: 1mb
      responses:
        200:
          description: Random user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: Unique identifier for the user
                        firstName:
                          type: string
                          description: User's first name
                        lastName:
                          type: string
                          description: User's last name
                        email:
                          type: string
                          format: email
                          description: User's email address
                        avatar:
                          type: string
                          format: uri
                          description: URL to user's avatar
                        address:
                          type: object
                          properties:
                            street:
                              type: string
                            city:
                              type: string
                            state:
                              type: string
                            country:
                              type: string
                            zipCode:
                              type: string
                        company:
                          type: object
                          properties:
                            name:
                              type: string
                            catchPhrase:
                              type: string
                        createdAt:
                          type: string
                          format: date-time
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
                    example: Invalid size unit. Supported units are mb, kb
  /api/uuid:
    get:
      summary: Generate a UUID4
      description: Return a UUID4
      tags:
        - Dynamic data
      produces:
        - application/json
      responses:
        200:
          description: A UUID4
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    format: uuid
                    description: A UUID4 string
                    example: 550e8400-e29b-41d4-a716-446655440000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT